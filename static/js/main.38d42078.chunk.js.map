{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/About.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","to","title","type","id","aboutText","onClick","toggleMode","htmlFor","placeholder","TextForm","useState","text","setText","style","color","heading","value","onChange","event","target","backgroundColor","rows","disabled","length","console","log","newText","toUpperCase","showAlert","toLowerCase","trim","charAt","slice","trimText","split","capitilizedWords","forEach","element","push","join","navigator","clipboard","writeText","filter","About","myStyle","defaultProps","Alert","word","height","alert","role","msg","App","setMode","setAlert","message","setTimeout","document","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38d42078.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <nav\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\n    >\n      <div className=\"container-fluid\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          {props.title}\n        </Link>\n        <button\n          className=\"navbar-toggler\"\n          type=\"button\"\n          data-bs-toggle=\"collapse\"\n          data-bs-target=\"#navbarSupportedContent\"\n          aria-controls=\"navbarSupportedContent\"\n          aria-expanded=\"false\"\n          aria-label=\"Toggle navigation\"\n        >\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">\n                Home\n              </Link>\n            </li>\n            <li className=\"nav-item\">\n              <Link className=\"nav-link active\" to=\"/about\">\n                {props.aboutText}\n              </Link>\n            </li>\n          </ul>\n          <div\n            className={`form-check form-switch text-${\n              props.mode === 'light' ? 'dark' : 'light'\n            } mx-4`}\n          >\n            <input\n              className=\"form-check-input\"\n              onClick={props.toggleMode}\n              type=\"checkbox\"\n              id=\"flexSwitchCheckDefault\"\n            />\n            <label\n              className=\"form-check-label\"\n              htmlFor=\"flexSwitchCheckDefault\"\n            >\n              Enable DarkMode!\n            </label>\n          </div>\n          <form className=\"d-flex\">\n            <input\n              className=\"form-control me-2\"\n              type=\"search\"\n              placeholder=\"Search\"\n              aria-label=\"Search\"\n            />\n            <button className=\"btn btn-outline-success\" type=\"submit\">\n              Search\n            </button>\n          </form>\n        </div>\n      </div>\n    </nav>\n  );\n}\n\nNavbar.propTypes = {\n  title: PropTypes.string.isRequired,\n  aboutText: PropTypes.string.isRequired,\n};\n\nNavbar.defaultProps = {\n  title: 'Set title here',\n  aboutText: 'About text here',\n};\n","import React, { useState } from 'react';\n\nexport default function TextForm(props) {\n  const handleUpClick = () => {\n    if (text) {\n      console.log('Uppercase was clicked!');\n      let newText = text.toUpperCase();\n      setText(newText);\n      props.showAlert('Converted to uppercase!', 'success');\n    }\n  };\n\n  const handleLoClick = () => {\n    if (text) {\n      // console.log(\"Lowercase was clicked!\");\n      let newText = text.toLowerCase();\n      setText(newText);\n      props.showAlert('Converted to lowercase!', 'success');\n    }\n  };\n\n  const handleClearClick = () => {\n    if (text) {\n      let newText = '';\n      setText(newText);\n      props.showAlert('Cleared Text!', 'danger');\n    }\n  };\n\n  //  This function returns trimed(eats extra white spaces before & after) version of our text input!\n  const handleTrimClick = () => {\n    if (text) {\n      let newText = text.trim();\n      setText(newText);\n      props.showAlert('Trimed Your Text!', 'success');\n    }\n  };\n\n  //  this function capitilize first latter of our whole sentence!\n  const handleCapitizeFirstLatterClick = () => {\n    if (text) {\n      let newText = text.charAt(0).toUpperCase() + text.slice(1);\n      setText(newText);\n      props.showAlert('Capitalized First Latter!', 'success');\n    }\n  };\n\n  const handleCopyClick = () => {\n    navigator.clipboard.writeText(text);\n    props.showAlert('Copied to Clipboard!', 'success');\n  };\n\n  const handleExtraSpacesClick = () => {\n    let newText = text.split(/[ ]+/);\n    setText(newText.join(' '));\n    props.showAlert('Removed Extra Spaces!', 'success');\n  };\n\n  // This fuction capitilize first latter of each word in our whole sentence!!\n  const handleCapitilizeEachFirstLatterClick = () => {\n    if (text) {\n      const newText = (text) => {\n        let trimText = text.trim();\n        trimText = trimText.split(' ');\n        let capitilizedWords = [];\n        trimText.forEach((element) => {\n          capitilizedWords.push(\n            element[0].toUpperCase() + element.slice(1, element.length)\n          );\n        });\n        return capitilizedWords.join(' ');\n      };\n      setText(newText);\n      props.showAlert(\n        'Capitalized Each first latter of your sentence !',\n        'success'\n      );\n    }\n  };\n\n  const handleOnChange = (event) => {\n    // console.log(\"on change\");\n    setText(event.target.value);\n  };\n  const [text, setText] = useState('');\n  return (\n    <>\n      <div\n        className=\"container my-3\"\n        style={{ color: props.mode === 'dark' ? 'white' : 'black' }}\n      >\n        <h1 className=\"mb-4\">{props.heading}</h1>\n        <div className=\"mb-3\">\n          <label htmlFor=\"FormControl\" className=\"form-label mx-2\">\n            Example textarea\n          </label>\n          <textarea\n            className=\"form-control\"\n            value={text}\n            onChange={handleOnChange}\n            style={{\n              backgroundColor: props.mode === 'dark' ? '#12332d' : 'white',\n              color: props.mode === 'dark' ? 'white' : 'black',\n            }}\n            id=\"FormControl\"\n            rows=\"10\"\n          ></textarea>\n        </div>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-success btn-lg mx-1 my-1 shadow\"\n          onClick={handleUpClick}\n        >\n          Convert to Uppercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary btn-lg mx-1 my-1 shadow\"\n          onClick={handleLoClick}\n        >\n          Convert to Lowercase\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-danger btn-lg mx-1 my-1 shadow\"\n          onClick={handleClearClick}\n        >\n          Clear Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary btn-lg mx-1 my-1 shadow\"\n          onClick={handleTrimClick}\n        >\n          Trim Text\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-warning btn-lg mx-1 my-1 shadow\"\n          onClick={handleCapitizeFirstLatterClick}\n        >\n          Capitilize First latter\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary btn-lg mx-1 my-1 shadow\"\n          onClick={handleCapitilizeEachFirstLatterClick}\n        >\n          Capitilize Each First latter\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary btn-lg mx-1 my-1 shadow\"\n          onClick={handleCopyClick}\n        >\n          Copy Text!\n        </button>\n        <button\n          disabled={text.length === 0}\n          className=\"btn btn-primary btn-lg mx-1 my-1 shadow\"\n          onClick={handleExtraSpacesClick}\n        >\n          Remove Extra Spaces!\n        </button>\n      </div>\n      <div\n        className=\"container\"\n        style={{ color: props.mode === 'dark' ? 'white' : 'black' }}\n      >\n        <h2>Your text summary</h2>\n        <p>\n          <b>\n            {\n              text.split(/\\s+/).filter((element) => {\n                return element.length !== 0;\n              }).length\n            }\n          </b>{' '}\n          words and <b>{text.length}</b> characters!\n        </p>\n        <p>\n          <b>\n            {text.split(' ').filter((element) => {\n              return element.length !== 0;\n            }).length === 0\n              ? 0\n              : 0.008 *\n                text.split(' ').filter((element) => {\n                  return element.length !== 0;\n                }).length}\n          </b>{' '}\n          Minute read!\n        </p>\n        <h2>Text preview</h2>\n        <div style={{ color: props.mode === 'dark' ? 'white' : 'black' }}>\n          <p>{text.length > 0 ? text : 'Nothing to preview!'}</p>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from 'react';\n\nexport default function About(props) {\n  // const [myStyle, setMyStyle] = useState(\n  //     {\n  //         color: 'black',\n  //         backgroundColor: 'white'\n  //     }\n  // )\n\n  let myStyle = {\n    color: props.mode === 'dark' ? 'white' : '#042743',\n    backgroundColor: props.mode === 'dark' ? 'rgb(36 74 104)' : 'white',\n  };\n\n  // const [btnText, setBtnText] = useState(\"Enable Dark Mode\")\n\n  // const toggleStyle = () => {\n  //     if (myStyle.backgroundColor === 'white') {\n  //         setMyStyle({\n  //             color: 'white',\n  //             backgroundColor: 'black'\n  //         })\n  //         setBtnText(\"Enable Light Mode\");\n  //     } else {\n  //         setMyStyle({\n  //             color: 'black',\n  //             backgroundColor: 'white'\n  //         })\n  //         setBtnText(\"Enable Dark Mode\");\n  //     }\n  // }\n\n  return (\n    <div\n      className=\"container my-3\"\n      style={{ color: props.mode === 'dark' ? 'white' : '#042743' }}\n    >\n      <h1>About Us!</h1>\n      <div className=\"accordion\" id=\"accordionExample\">\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingOne\">\n            <button\n              className=\"accordion-button\"\n              type=\"button\"\n              style={myStyle}\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseOne\"\n              aria-expanded=\"true\"\n              aria-controls=\"collapseOne\"\n            >\n              <strong>Analyze Your Text1</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseOne\"\n            className=\"accordion-collapse collapse show\"\n            aria-labelledby=\"headingOne\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              Textutils gives you a way to analyze your text quickly and\n              efficiently. Be it word count, character count or\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingTwo\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              style={myStyle}\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseTwo\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseTwo\"\n            >\n              <strong>Free to use</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseTwo\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingTwo\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              Textutils is free character couter tool that provides instant\n              character count & word count statistics for a given text.\n              TextUtils the number of word and characters. Thus it is suitable\n              for writing text with text with word/ character limit.\n            </div>\n          </div>\n        </div>\n        <div className=\"accordion-item\">\n          <h2 className=\"accordion-header\" id=\"headingThree\">\n            <button\n              className=\"accordion-button collapsed\"\n              type=\"button\"\n              style={myStyle}\n              data-bs-toggle=\"collapse\"\n              data-bs-target=\"#collapseThree\"\n              aria-expanded=\"false\"\n              aria-controls=\"collapseThree\"\n            >\n              <strong>Free to useBrowser Compatible</strong>\n            </button>\n          </h2>\n          <div\n            id=\"collapseThree\"\n            className=\"accordion-collapse collapse\"\n            aria-labelledby=\"headingThree\"\n            data-bs-parent=\"#accordionExample\"\n          >\n            <div className=\"accordion-body\" style={myStyle}>\n              This word counter software works in any web browsers such chrome,\n              Firefox, Internet Explorer, Safari, Opera. It suits to count\n              characters in facebook, blog, books, excel document, pdf document,\n              essays, etc.\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\n\nfunction Alert(props) {\n  const capitalize = (word) => {\n    let newText = word.charAt(0).toUpperCase() + word.slice(1);\n    return newText;\n  };\n  return (\n    <div style={{ height: '50px' }}>\n      {props.alert && (\n        <div\n          className={`alert alert-${props.alert.type} alert-dismissible fade show`}\n          role=\"alert\"\n        >\n          <strong>{capitalize(props.alert.type)}</strong> : {props.alert.msg}\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Alert;\n","// import logo from './logo.svg';\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  // Link\n} from 'react-router-dom';\n\nfunction App() {\n  const [mode, setMode] = useState('light'); //whether dark mode is enabled or not.\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#08112cf7';\n      showAlert('Dark Mode has been enbled', 'success');\n    } else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light Mode has been enbled', 'success');\n    }\n  };\n  return (\n    <>\n      {/* <Navbar /> */}\n      <Router>\n        <Navbar\n          title=\"TextUtils\"\n          aboutText=\"About Utils\"\n          mode={mode}\n          toggleMode={toggleMode}\n        />\n        <Alert alert={alert} />\n        <Switch>\n          {/* /users --> Component 1 */}\n          {/* /users/ --> Component 2*/}\n          <Route exact path=\"/about\">\n            <About mode={mode} />\n          </Route>\n          <Route exact path=\"/\">\n            <TextForm\n              heading=\"Try TextUtils - Word Counter, Character Couter, Remove extra Spaces\"\n              mode={mode}\n              showAlert={showAlert}\n            />\n          </Route>\n        </Switch>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}